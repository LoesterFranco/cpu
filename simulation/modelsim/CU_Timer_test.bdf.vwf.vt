// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2018 14:24:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CU_Timer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CU_Timer_vlg_sample_tst(
	Cy,
	start,
	sampler_tx
);
input  Cy;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(Cy or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CU_Timer_vlg_check_tst (
	BUS_MDR,
	clk,
	cnt,
	DST,
	FI,
	I_DBUS,
	IBUS_IR,
	IBUS_MAR,
	IBUS_PC,
	M_clk,
	MAR_ABUS,
	MAR_IBUS,
	MDR_DBUS,
	MDR_IBUS,
	MRD,
	MWR,
	PC_IBUS,
	PCplus1,
	T,
	temp,
	W_B,
	zero_PC,
	sampler_rx
);
input  BUS_MDR;
input  clk;
input [3:0] cnt;
input  DST;
input  FI;
input  I_DBUS;
input  IBUS_IR;
input  IBUS_MAR;
input  IBUS_PC;
input  M_clk;
input  MAR_ABUS;
input  MAR_IBUS;
input  MDR_DBUS;
input  MDR_IBUS;
input  MRD;
input  MWR;
input  PC_IBUS;
input  PCplus1;
input [7:0] T;
input [47:0] temp;
input  W_B;
input  zero_PC;
input sampler_rx;

reg  BUS_MDR_expected;
reg  clk_expected;
reg [3:0] cnt_expected;
reg  DST_expected;
reg  FI_expected;
reg  I_DBUS_expected;
reg  IBUS_IR_expected;
reg  IBUS_MAR_expected;
reg  IBUS_PC_expected;
reg  M_clk_expected;
reg  MAR_ABUS_expected;
reg  MAR_IBUS_expected;
reg  MDR_DBUS_expected;
reg  MDR_IBUS_expected;
reg  MRD_expected;
reg  MWR_expected;
reg  PC_IBUS_expected;
reg  PCplus1_expected;
reg [7:0] T_expected;
reg [47:0] temp_expected;
reg  W_B_expected;
reg  zero_PC_expected;

reg  BUS_MDR_prev;
reg  clk_prev;
reg [3:0] cnt_prev;
reg  DST_prev;
reg  FI_prev;
reg  I_DBUS_prev;
reg  IBUS_IR_prev;
reg  IBUS_MAR_prev;
reg  IBUS_PC_prev;
reg  M_clk_prev;
reg  MAR_ABUS_prev;
reg  MAR_IBUS_prev;
reg  MDR_DBUS_prev;
reg  MDR_IBUS_prev;
reg  MRD_prev;
reg  MWR_prev;
reg  PC_IBUS_prev;
reg  PCplus1_prev;
reg [7:0] T_prev;
reg [47:0] temp_prev;
reg  W_B_prev;
reg  zero_PC_prev;

reg  BUS_MDR_expected_prev;
reg  clk_expected_prev;
reg [3:0] cnt_expected_prev;
reg  DST_expected_prev;
reg  FI_expected_prev;
reg  I_DBUS_expected_prev;
reg  IBUS_IR_expected_prev;
reg  IBUS_MAR_expected_prev;
reg  IBUS_PC_expected_prev;
reg  M_clk_expected_prev;
reg  MAR_ABUS_expected_prev;
reg  MAR_IBUS_expected_prev;
reg  MDR_DBUS_expected_prev;
reg  MDR_IBUS_expected_prev;
reg  MRD_expected_prev;
reg  MWR_expected_prev;
reg  PC_IBUS_expected_prev;
reg  PCplus1_expected_prev;
reg [7:0] T_expected_prev;
reg [47:0] temp_expected_prev;
reg  W_B_expected_prev;
reg  zero_PC_expected_prev;

reg  last_BUS_MDR_exp;
reg  last_clk_exp;
reg [3:0] last_cnt_exp;
reg  last_DST_exp;
reg  last_FI_exp;
reg  last_I_DBUS_exp;
reg  last_IBUS_IR_exp;
reg  last_IBUS_MAR_exp;
reg  last_IBUS_PC_exp;
reg  last_M_clk_exp;
reg  last_MAR_ABUS_exp;
reg  last_MAR_IBUS_exp;
reg  last_MDR_DBUS_exp;
reg  last_MDR_IBUS_exp;
reg  last_MRD_exp;
reg  last_MWR_exp;
reg  last_PC_IBUS_exp;
reg  last_PCplus1_exp;
reg [7:0] last_T_exp;
reg [47:0] last_temp_exp;
reg  last_W_B_exp;
reg  last_zero_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	BUS_MDR_prev = BUS_MDR;
	clk_prev = clk;
	cnt_prev = cnt;
	DST_prev = DST;
	FI_prev = FI;
	I_DBUS_prev = I_DBUS;
	IBUS_IR_prev = IBUS_IR;
	IBUS_MAR_prev = IBUS_MAR;
	IBUS_PC_prev = IBUS_PC;
	M_clk_prev = M_clk;
	MAR_ABUS_prev = MAR_ABUS;
	MAR_IBUS_prev = MAR_IBUS;
	MDR_DBUS_prev = MDR_DBUS;
	MDR_IBUS_prev = MDR_IBUS;
	MRD_prev = MRD;
	MWR_prev = MWR;
	PC_IBUS_prev = PC_IBUS;
	PCplus1_prev = PCplus1;
	T_prev = T;
	temp_prev = temp;
	W_B_prev = W_B;
	zero_PC_prev = zero_PC;
end

// update expected /o prevs

always @(trigger)
begin
	BUS_MDR_expected_prev = BUS_MDR_expected;
	clk_expected_prev = clk_expected;
	cnt_expected_prev = cnt_expected;
	DST_expected_prev = DST_expected;
	FI_expected_prev = FI_expected;
	I_DBUS_expected_prev = I_DBUS_expected;
	IBUS_IR_expected_prev = IBUS_IR_expected;
	IBUS_MAR_expected_prev = IBUS_MAR_expected;
	IBUS_PC_expected_prev = IBUS_PC_expected;
	M_clk_expected_prev = M_clk_expected;
	MAR_ABUS_expected_prev = MAR_ABUS_expected;
	MAR_IBUS_expected_prev = MAR_IBUS_expected;
	MDR_DBUS_expected_prev = MDR_DBUS_expected;
	MDR_IBUS_expected_prev = MDR_IBUS_expected;
	MRD_expected_prev = MRD_expected;
	MWR_expected_prev = MWR_expected;
	PC_IBUS_expected_prev = PC_IBUS_expected;
	PCplus1_expected_prev = PCplus1_expected;
	T_expected_prev = T_expected;
	temp_expected_prev = temp_expected;
	W_B_expected_prev = W_B_expected;
	zero_PC_expected_prev = zero_PC_expected;
end



// expected clk
initial
begin
	clk_expected = 1'bX;
end 

// expected BUS_MDR
initial
begin
	BUS_MDR_expected = 1'bX;
end 

// expected I_DBUS
initial
begin
	I_DBUS_expected = 1'bX;
end 

// expected IBUS_IR
initial
begin
	IBUS_IR_expected = 1'bX;
end 

// expected IBUS_MAR
initial
begin
	IBUS_MAR_expected = 1'bX;
end 

// expected IBUS_PC
initial
begin
	IBUS_PC_expected = 1'bX;
end 

// expected M_clk
initial
begin
	M_clk_expected = 1'bX;
end 

// expected MAR_ABUS
initial
begin
	MAR_ABUS_expected = 1'bX;
end 

// expected MAR_IBUS
initial
begin
	MAR_IBUS_expected = 1'bX;
end 

// expected MDR_DBUS
initial
begin
	MDR_DBUS_expected = 1'bX;
end 

// expected MDR_IBUS
initial
begin
	MDR_IBUS_expected = 1'bX;
end 

// expected MRD
initial
begin
	MRD_expected = 1'bX;
end 

// expected MWR
initial
begin
	MWR_expected = 1'bX;
end 

// expected PC_IBUS
initial
begin
	PC_IBUS_expected = 1'bX;
end 

// expected PCplus1
initial
begin
	PCplus1_expected = 1'bX;
end 

// expected W_B
initial
begin
	W_B_expected = 1'bX;
end 

// expected zero_PC
initial
begin
	zero_PC_expected = 1'bX;
end 
// expected temp[ 47 ]
initial
begin
	temp_expected[47] = 1'bX;
end 
// expected temp[ 46 ]
initial
begin
	temp_expected[46] = 1'bX;
end 
// expected temp[ 45 ]
initial
begin
	temp_expected[45] = 1'bX;
end 
// expected temp[ 44 ]
initial
begin
	temp_expected[44] = 1'bX;
end 
// expected temp[ 43 ]
initial
begin
	temp_expected[43] = 1'bX;
end 
// expected temp[ 42 ]
initial
begin
	temp_expected[42] = 1'bX;
end 
// expected temp[ 41 ]
initial
begin
	temp_expected[41] = 1'bX;
end 
// expected temp[ 40 ]
initial
begin
	temp_expected[40] = 1'bX;
end 
// expected temp[ 39 ]
initial
begin
	temp_expected[39] = 1'bX;
end 
// expected temp[ 38 ]
initial
begin
	temp_expected[38] = 1'bX;
end 
// expected temp[ 37 ]
initial
begin
	temp_expected[37] = 1'bX;
end 
// expected temp[ 36 ]
initial
begin
	temp_expected[36] = 1'bX;
end 
// expected temp[ 35 ]
initial
begin
	temp_expected[35] = 1'bX;
end 
// expected temp[ 34 ]
initial
begin
	temp_expected[34] = 1'bX;
end 
// expected temp[ 33 ]
initial
begin
	temp_expected[33] = 1'bX;
end 
// expected temp[ 32 ]
initial
begin
	temp_expected[32] = 1'bX;
end 
// expected temp[ 31 ]
initial
begin
	temp_expected[31] = 1'bX;
end 
// expected temp[ 30 ]
initial
begin
	temp_expected[30] = 1'bX;
end 
// expected temp[ 29 ]
initial
begin
	temp_expected[29] = 1'bX;
end 
// expected temp[ 28 ]
initial
begin
	temp_expected[28] = 1'bX;
end 
// expected temp[ 27 ]
initial
begin
	temp_expected[27] = 1'bX;
end 
// expected temp[ 26 ]
initial
begin
	temp_expected[26] = 1'bX;
end 
// expected temp[ 25 ]
initial
begin
	temp_expected[25] = 1'bX;
end 
// expected temp[ 24 ]
initial
begin
	temp_expected[24] = 1'bX;
end 
// expected temp[ 23 ]
initial
begin
	temp_expected[23] = 1'bX;
end 
// expected temp[ 22 ]
initial
begin
	temp_expected[22] = 1'bX;
end 
// expected temp[ 21 ]
initial
begin
	temp_expected[21] = 1'bX;
end 
// expected temp[ 20 ]
initial
begin
	temp_expected[20] = 1'bX;
end 
// expected temp[ 19 ]
initial
begin
	temp_expected[19] = 1'bX;
end 
// expected temp[ 18 ]
initial
begin
	temp_expected[18] = 1'bX;
end 
// expected temp[ 17 ]
initial
begin
	temp_expected[17] = 1'bX;
end 
// expected temp[ 16 ]
initial
begin
	temp_expected[16] = 1'bX;
end 
// expected temp[ 15 ]
initial
begin
	temp_expected[15] = 1'bX;
end 
// expected temp[ 14 ]
initial
begin
	temp_expected[14] = 1'bX;
end 
// expected temp[ 13 ]
initial
begin
	temp_expected[13] = 1'bX;
end 
// expected temp[ 12 ]
initial
begin
	temp_expected[12] = 1'bX;
end 
// expected temp[ 11 ]
initial
begin
	temp_expected[11] = 1'bX;
end 
// expected temp[ 10 ]
initial
begin
	temp_expected[10] = 1'bX;
end 
// expected temp[ 9 ]
initial
begin
	temp_expected[9] = 1'bX;
end 
// expected temp[ 8 ]
initial
begin
	temp_expected[8] = 1'bX;
end 
// expected temp[ 7 ]
initial
begin
	temp_expected[7] = 1'bX;
end 
// expected temp[ 6 ]
initial
begin
	temp_expected[6] = 1'bX;
end 
// expected temp[ 5 ]
initial
begin
	temp_expected[5] = 1'bX;
end 
// expected temp[ 4 ]
initial
begin
	temp_expected[4] = 1'bX;
end 
// expected temp[ 3 ]
initial
begin
	temp_expected[3] = 1'bX;
end 
// expected temp[ 2 ]
initial
begin
	temp_expected[2] = 1'bX;
end 
// expected temp[ 1 ]
initial
begin
	temp_expected[1] = 1'bX;
end 
// expected temp[ 0 ]
initial
begin
	temp_expected[0] = 1'bX;
end 
// expected cnt[ 3 ]
initial
begin
	cnt_expected[3] = 1'bX;
end 
// expected cnt[ 2 ]
initial
begin
	cnt_expected[2] = 1'bX;
end 
// expected cnt[ 1 ]
initial
begin
	cnt_expected[1] = 1'bX;
end 
// expected cnt[ 0 ]
initial
begin
	cnt_expected[0] = 1'bX;
end 

// expected FI
initial
begin
	FI_expected = 1'bX;
end 

// expected DST
initial
begin
	DST_expected = 1'bX;
end 
// expected T[ 7 ]
initial
begin
	T_expected[7] = 1'bX;
end 
// expected T[ 6 ]
initial
begin
	T_expected[6] = 1'bX;
end 
// expected T[ 5 ]
initial
begin
	T_expected[5] = 1'bX;
end 
// expected T[ 4 ]
initial
begin
	T_expected[4] = 1'bX;
end 
// expected T[ 3 ]
initial
begin
	T_expected[3] = 1'bX;
end 
// expected T[ 2 ]
initial
begin
	T_expected[2] = 1'bX;
end 
// expected T[ 1 ]
initial
begin
	T_expected[1] = 1'bX;
end 
// expected T[ 0 ]
initial
begin
	T_expected[0] = 1'bX;
end 
// generate trigger
always @(BUS_MDR_expected or BUS_MDR or clk_expected or clk or cnt_expected or cnt or DST_expected or DST or FI_expected or FI or I_DBUS_expected or I_DBUS or IBUS_IR_expected or IBUS_IR or IBUS_MAR_expected or IBUS_MAR or IBUS_PC_expected or IBUS_PC or M_clk_expected or M_clk or MAR_ABUS_expected or MAR_ABUS or MAR_IBUS_expected or MAR_IBUS or MDR_DBUS_expected or MDR_DBUS or MDR_IBUS_expected or MDR_IBUS or MRD_expected or MRD or MWR_expected or MWR or PC_IBUS_expected or PC_IBUS or PCplus1_expected or PCplus1 or T_expected or T or temp_expected or temp or W_B_expected or W_B or zero_PC_expected or zero_PC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BUS_MDR = %b | expected clk = %b | expected cnt = %b | expected DST = %b | expected FI = %b | expected I_DBUS = %b | expected IBUS_IR = %b | expected IBUS_MAR = %b | expected IBUS_PC = %b | expected M_clk = %b | expected MAR_ABUS = %b | expected MAR_IBUS = %b | expected MDR_DBUS = %b | expected MDR_IBUS = %b | expected MRD = %b | expected MWR = %b | expected PC_IBUS = %b | expected PCplus1 = %b | expected T = %b | expected temp = %b | expected W_B = %b | expected zero_PC = %b | ",BUS_MDR_expected_prev,clk_expected_prev,cnt_expected_prev,DST_expected_prev,FI_expected_prev,I_DBUS_expected_prev,IBUS_IR_expected_prev,IBUS_MAR_expected_prev,IBUS_PC_expected_prev,M_clk_expected_prev,MAR_ABUS_expected_prev,MAR_IBUS_expected_prev,MDR_DBUS_expected_prev,MDR_IBUS_expected_prev,MRD_expected_prev,MWR_expected_prev,PC_IBUS_expected_prev,PCplus1_expected_prev,T_expected_prev,temp_expected_prev,W_B_expected_prev,zero_PC_expected_prev);
	$display("| real BUS_MDR = %b | real clk = %b | real cnt = %b | real DST = %b | real FI = %b | real I_DBUS = %b | real IBUS_IR = %b | real IBUS_MAR = %b | real IBUS_PC = %b | real M_clk = %b | real MAR_ABUS = %b | real MAR_IBUS = %b | real MDR_DBUS = %b | real MDR_IBUS = %b | real MRD = %b | real MWR = %b | real PC_IBUS = %b | real PCplus1 = %b | real T = %b | real temp = %b | real W_B = %b | real zero_PC = %b | ",BUS_MDR_prev,clk_prev,cnt_prev,DST_prev,FI_prev,I_DBUS_prev,IBUS_IR_prev,IBUS_MAR_prev,IBUS_PC_prev,M_clk_prev,MAR_ABUS_prev,MAR_IBUS_prev,MDR_DBUS_prev,MDR_IBUS_prev,MRD_prev,MWR_prev,PC_IBUS_prev,PCplus1_prev,T_prev,temp_prev,W_B_prev,zero_PC_prev);
`endif
	if (
		( BUS_MDR_expected_prev !== 1'bx ) && ( BUS_MDR_prev !== BUS_MDR_expected_prev )
		&& ((BUS_MDR_expected_prev !== last_BUS_MDR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_MDR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_MDR_expected_prev);
		$display ("     Real value = %b", BUS_MDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BUS_MDR_exp = BUS_MDR_expected_prev;
	end
	if (
		( clk_expected_prev !== 1'bx ) && ( clk_prev !== clk_expected_prev )
		&& ((clk_expected_prev !== last_clk_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_expected_prev);
		$display ("     Real value = %b", clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_exp = clk_expected_prev;
	end
	if (
		( cnt_expected_prev[0] !== 1'bx ) && ( cnt_prev[0] !== cnt_expected_prev[0] )
		&& ((cnt_expected_prev[0] !== last_cnt_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[0] = cnt_expected_prev[0];
	end
	if (
		( cnt_expected_prev[1] !== 1'bx ) && ( cnt_prev[1] !== cnt_expected_prev[1] )
		&& ((cnt_expected_prev[1] !== last_cnt_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[1] = cnt_expected_prev[1];
	end
	if (
		( cnt_expected_prev[2] !== 1'bx ) && ( cnt_prev[2] !== cnt_expected_prev[2] )
		&& ((cnt_expected_prev[2] !== last_cnt_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[2] = cnt_expected_prev[2];
	end
	if (
		( cnt_expected_prev[3] !== 1'bx ) && ( cnt_prev[3] !== cnt_expected_prev[3] )
		&& ((cnt_expected_prev[3] !== last_cnt_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cnt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cnt_expected_prev);
		$display ("     Real value = %b", cnt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cnt_exp[3] = cnt_expected_prev[3];
	end
	if (
		( DST_expected_prev !== 1'bx ) && ( DST_prev !== DST_expected_prev )
		&& ((DST_expected_prev !== last_DST_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DST :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DST_expected_prev);
		$display ("     Real value = %b", DST_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DST_exp = DST_expected_prev;
	end
	if (
		( FI_expected_prev !== 1'bx ) && ( FI_prev !== FI_expected_prev )
		&& ((FI_expected_prev !== last_FI_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FI_expected_prev);
		$display ("     Real value = %b", FI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_FI_exp = FI_expected_prev;
	end
	if (
		( I_DBUS_expected_prev !== 1'bx ) && ( I_DBUS_prev !== I_DBUS_expected_prev )
		&& ((I_DBUS_expected_prev !== last_I_DBUS_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_DBUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_DBUS_expected_prev);
		$display ("     Real value = %b", I_DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_DBUS_exp = I_DBUS_expected_prev;
	end
	if (
		( IBUS_IR_expected_prev !== 1'bx ) && ( IBUS_IR_prev !== IBUS_IR_expected_prev )
		&& ((IBUS_IR_expected_prev !== last_IBUS_IR_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IBUS_IR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IBUS_IR_expected_prev);
		$display ("     Real value = %b", IBUS_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IBUS_IR_exp = IBUS_IR_expected_prev;
	end
	if (
		( IBUS_MAR_expected_prev !== 1'bx ) && ( IBUS_MAR_prev !== IBUS_MAR_expected_prev )
		&& ((IBUS_MAR_expected_prev !== last_IBUS_MAR_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IBUS_MAR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IBUS_MAR_expected_prev);
		$display ("     Real value = %b", IBUS_MAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IBUS_MAR_exp = IBUS_MAR_expected_prev;
	end
	if (
		( IBUS_PC_expected_prev !== 1'bx ) && ( IBUS_PC_prev !== IBUS_PC_expected_prev )
		&& ((IBUS_PC_expected_prev !== last_IBUS_PC_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IBUS_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IBUS_PC_expected_prev);
		$display ("     Real value = %b", IBUS_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_IBUS_PC_exp = IBUS_PC_expected_prev;
	end
	if (
		( M_clk_expected_prev !== 1'bx ) && ( M_clk_prev !== M_clk_expected_prev )
		&& ((M_clk_expected_prev !== last_M_clk_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M_clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_clk_expected_prev);
		$display ("     Real value = %b", M_clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_M_clk_exp = M_clk_expected_prev;
	end
	if (
		( MAR_ABUS_expected_prev !== 1'bx ) && ( MAR_ABUS_prev !== MAR_ABUS_expected_prev )
		&& ((MAR_ABUS_expected_prev !== last_MAR_ABUS_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_ABUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_ABUS_expected_prev);
		$display ("     Real value = %b", MAR_ABUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_MAR_ABUS_exp = MAR_ABUS_expected_prev;
	end
	if (
		( MAR_IBUS_expected_prev !== 1'bx ) && ( MAR_IBUS_prev !== MAR_IBUS_expected_prev )
		&& ((MAR_IBUS_expected_prev !== last_MAR_IBUS_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MAR_IBUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MAR_IBUS_expected_prev);
		$display ("     Real value = %b", MAR_IBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MAR_IBUS_exp = MAR_IBUS_expected_prev;
	end
	if (
		( MDR_DBUS_expected_prev !== 1'bx ) && ( MDR_DBUS_prev !== MDR_DBUS_expected_prev )
		&& ((MDR_DBUS_expected_prev !== last_MDR_DBUS_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_DBUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_DBUS_expected_prev);
		$display ("     Real value = %b", MDR_DBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_MDR_DBUS_exp = MDR_DBUS_expected_prev;
	end
	if (
		( MDR_IBUS_expected_prev !== 1'bx ) && ( MDR_IBUS_prev !== MDR_IBUS_expected_prev )
		&& ((MDR_IBUS_expected_prev !== last_MDR_IBUS_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MDR_IBUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MDR_IBUS_expected_prev);
		$display ("     Real value = %b", MDR_IBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_MDR_IBUS_exp = MDR_IBUS_expected_prev;
	end
	if (
		( MRD_expected_prev !== 1'bx ) && ( MRD_prev !== MRD_expected_prev )
		&& ((MRD_expected_prev !== last_MRD_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MRD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MRD_expected_prev);
		$display ("     Real value = %b", MRD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_MRD_exp = MRD_expected_prev;
	end
	if (
		( MWR_expected_prev !== 1'bx ) && ( MWR_prev !== MWR_expected_prev )
		&& ((MWR_expected_prev !== last_MWR_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MWR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MWR_expected_prev);
		$display ("     Real value = %b", MWR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_MWR_exp = MWR_expected_prev;
	end
	if (
		( PC_IBUS_expected_prev !== 1'bx ) && ( PC_IBUS_prev !== PC_IBUS_expected_prev )
		&& ((PC_IBUS_expected_prev !== last_PC_IBUS_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_IBUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_IBUS_expected_prev);
		$display ("     Real value = %b", PC_IBUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_PC_IBUS_exp = PC_IBUS_expected_prev;
	end
	if (
		( PCplus1_expected_prev !== 1'bx ) && ( PCplus1_prev !== PCplus1_expected_prev )
		&& ((PCplus1_expected_prev !== last_PCplus1_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PCplus1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PCplus1_expected_prev);
		$display ("     Real value = %b", PCplus1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_PCplus1_exp = PCplus1_expected_prev;
	end
	if (
		( T_expected_prev[0] !== 1'bx ) && ( T_prev[0] !== T_expected_prev[0] )
		&& ((T_expected_prev[0] !== last_T_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[0] = T_expected_prev[0];
	end
	if (
		( T_expected_prev[1] !== 1'bx ) && ( T_prev[1] !== T_expected_prev[1] )
		&& ((T_expected_prev[1] !== last_T_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[1] = T_expected_prev[1];
	end
	if (
		( T_expected_prev[2] !== 1'bx ) && ( T_prev[2] !== T_expected_prev[2] )
		&& ((T_expected_prev[2] !== last_T_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[2] = T_expected_prev[2];
	end
	if (
		( T_expected_prev[3] !== 1'bx ) && ( T_prev[3] !== T_expected_prev[3] )
		&& ((T_expected_prev[3] !== last_T_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[3] = T_expected_prev[3];
	end
	if (
		( T_expected_prev[4] !== 1'bx ) && ( T_prev[4] !== T_expected_prev[4] )
		&& ((T_expected_prev[4] !== last_T_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[4] = T_expected_prev[4];
	end
	if (
		( T_expected_prev[5] !== 1'bx ) && ( T_prev[5] !== T_expected_prev[5] )
		&& ((T_expected_prev[5] !== last_T_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[5] = T_expected_prev[5];
	end
	if (
		( T_expected_prev[6] !== 1'bx ) && ( T_prev[6] !== T_expected_prev[6] )
		&& ((T_expected_prev[6] !== last_T_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[6] = T_expected_prev[6];
	end
	if (
		( T_expected_prev[7] !== 1'bx ) && ( T_prev[7] !== T_expected_prev[7] )
		&& ((T_expected_prev[7] !== last_T_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T_exp[7] = T_expected_prev[7];
	end
	if (
		( temp_expected_prev[0] !== 1'bx ) && ( temp_prev[0] !== temp_expected_prev[0] )
		&& ((temp_expected_prev[0] !== last_temp_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[0] = temp_expected_prev[0];
	end
	if (
		( temp_expected_prev[1] !== 1'bx ) && ( temp_prev[1] !== temp_expected_prev[1] )
		&& ((temp_expected_prev[1] !== last_temp_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[1] = temp_expected_prev[1];
	end
	if (
		( temp_expected_prev[2] !== 1'bx ) && ( temp_prev[2] !== temp_expected_prev[2] )
		&& ((temp_expected_prev[2] !== last_temp_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[2] = temp_expected_prev[2];
	end
	if (
		( temp_expected_prev[3] !== 1'bx ) && ( temp_prev[3] !== temp_expected_prev[3] )
		&& ((temp_expected_prev[3] !== last_temp_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[3] = temp_expected_prev[3];
	end
	if (
		( temp_expected_prev[4] !== 1'bx ) && ( temp_prev[4] !== temp_expected_prev[4] )
		&& ((temp_expected_prev[4] !== last_temp_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[4] = temp_expected_prev[4];
	end
	if (
		( temp_expected_prev[5] !== 1'bx ) && ( temp_prev[5] !== temp_expected_prev[5] )
		&& ((temp_expected_prev[5] !== last_temp_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[5] = temp_expected_prev[5];
	end
	if (
		( temp_expected_prev[6] !== 1'bx ) && ( temp_prev[6] !== temp_expected_prev[6] )
		&& ((temp_expected_prev[6] !== last_temp_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[6] = temp_expected_prev[6];
	end
	if (
		( temp_expected_prev[7] !== 1'bx ) && ( temp_prev[7] !== temp_expected_prev[7] )
		&& ((temp_expected_prev[7] !== last_temp_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[7] = temp_expected_prev[7];
	end
	if (
		( temp_expected_prev[8] !== 1'bx ) && ( temp_prev[8] !== temp_expected_prev[8] )
		&& ((temp_expected_prev[8] !== last_temp_exp[8]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[8] = temp_expected_prev[8];
	end
	if (
		( temp_expected_prev[9] !== 1'bx ) && ( temp_prev[9] !== temp_expected_prev[9] )
		&& ((temp_expected_prev[9] !== last_temp_exp[9]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[9] = temp_expected_prev[9];
	end
	if (
		( temp_expected_prev[10] !== 1'bx ) && ( temp_prev[10] !== temp_expected_prev[10] )
		&& ((temp_expected_prev[10] !== last_temp_exp[10]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[10] = temp_expected_prev[10];
	end
	if (
		( temp_expected_prev[11] !== 1'bx ) && ( temp_prev[11] !== temp_expected_prev[11] )
		&& ((temp_expected_prev[11] !== last_temp_exp[11]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[11] = temp_expected_prev[11];
	end
	if (
		( temp_expected_prev[12] !== 1'bx ) && ( temp_prev[12] !== temp_expected_prev[12] )
		&& ((temp_expected_prev[12] !== last_temp_exp[12]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[12] = temp_expected_prev[12];
	end
	if (
		( temp_expected_prev[13] !== 1'bx ) && ( temp_prev[13] !== temp_expected_prev[13] )
		&& ((temp_expected_prev[13] !== last_temp_exp[13]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[13] = temp_expected_prev[13];
	end
	if (
		( temp_expected_prev[14] !== 1'bx ) && ( temp_prev[14] !== temp_expected_prev[14] )
		&& ((temp_expected_prev[14] !== last_temp_exp[14]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[14] = temp_expected_prev[14];
	end
	if (
		( temp_expected_prev[15] !== 1'bx ) && ( temp_prev[15] !== temp_expected_prev[15] )
		&& ((temp_expected_prev[15] !== last_temp_exp[15]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[15] = temp_expected_prev[15];
	end
	if (
		( temp_expected_prev[16] !== 1'bx ) && ( temp_prev[16] !== temp_expected_prev[16] )
		&& ((temp_expected_prev[16] !== last_temp_exp[16]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[16] = temp_expected_prev[16];
	end
	if (
		( temp_expected_prev[17] !== 1'bx ) && ( temp_prev[17] !== temp_expected_prev[17] )
		&& ((temp_expected_prev[17] !== last_temp_exp[17]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[17] = temp_expected_prev[17];
	end
	if (
		( temp_expected_prev[18] !== 1'bx ) && ( temp_prev[18] !== temp_expected_prev[18] )
		&& ((temp_expected_prev[18] !== last_temp_exp[18]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[18] = temp_expected_prev[18];
	end
	if (
		( temp_expected_prev[19] !== 1'bx ) && ( temp_prev[19] !== temp_expected_prev[19] )
		&& ((temp_expected_prev[19] !== last_temp_exp[19]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[19] = temp_expected_prev[19];
	end
	if (
		( temp_expected_prev[20] !== 1'bx ) && ( temp_prev[20] !== temp_expected_prev[20] )
		&& ((temp_expected_prev[20] !== last_temp_exp[20]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[20] = temp_expected_prev[20];
	end
	if (
		( temp_expected_prev[21] !== 1'bx ) && ( temp_prev[21] !== temp_expected_prev[21] )
		&& ((temp_expected_prev[21] !== last_temp_exp[21]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[21] = temp_expected_prev[21];
	end
	if (
		( temp_expected_prev[22] !== 1'bx ) && ( temp_prev[22] !== temp_expected_prev[22] )
		&& ((temp_expected_prev[22] !== last_temp_exp[22]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[22] = temp_expected_prev[22];
	end
	if (
		( temp_expected_prev[23] !== 1'bx ) && ( temp_prev[23] !== temp_expected_prev[23] )
		&& ((temp_expected_prev[23] !== last_temp_exp[23]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[23] = temp_expected_prev[23];
	end
	if (
		( temp_expected_prev[24] !== 1'bx ) && ( temp_prev[24] !== temp_expected_prev[24] )
		&& ((temp_expected_prev[24] !== last_temp_exp[24]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[24] = temp_expected_prev[24];
	end
	if (
		( temp_expected_prev[25] !== 1'bx ) && ( temp_prev[25] !== temp_expected_prev[25] )
		&& ((temp_expected_prev[25] !== last_temp_exp[25]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[25] = temp_expected_prev[25];
	end
	if (
		( temp_expected_prev[26] !== 1'bx ) && ( temp_prev[26] !== temp_expected_prev[26] )
		&& ((temp_expected_prev[26] !== last_temp_exp[26]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[26] = temp_expected_prev[26];
	end
	if (
		( temp_expected_prev[27] !== 1'bx ) && ( temp_prev[27] !== temp_expected_prev[27] )
		&& ((temp_expected_prev[27] !== last_temp_exp[27]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[27] = temp_expected_prev[27];
	end
	if (
		( temp_expected_prev[28] !== 1'bx ) && ( temp_prev[28] !== temp_expected_prev[28] )
		&& ((temp_expected_prev[28] !== last_temp_exp[28]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[28] = temp_expected_prev[28];
	end
	if (
		( temp_expected_prev[29] !== 1'bx ) && ( temp_prev[29] !== temp_expected_prev[29] )
		&& ((temp_expected_prev[29] !== last_temp_exp[29]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[29] = temp_expected_prev[29];
	end
	if (
		( temp_expected_prev[30] !== 1'bx ) && ( temp_prev[30] !== temp_expected_prev[30] )
		&& ((temp_expected_prev[30] !== last_temp_exp[30]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[30] = temp_expected_prev[30];
	end
	if (
		( temp_expected_prev[31] !== 1'bx ) && ( temp_prev[31] !== temp_expected_prev[31] )
		&& ((temp_expected_prev[31] !== last_temp_exp[31]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[31] = temp_expected_prev[31];
	end
	if (
		( temp_expected_prev[32] !== 1'bx ) && ( temp_prev[32] !== temp_expected_prev[32] )
		&& ((temp_expected_prev[32] !== last_temp_exp[32]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[32] = temp_expected_prev[32];
	end
	if (
		( temp_expected_prev[33] !== 1'bx ) && ( temp_prev[33] !== temp_expected_prev[33] )
		&& ((temp_expected_prev[33] !== last_temp_exp[33]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[33] = temp_expected_prev[33];
	end
	if (
		( temp_expected_prev[34] !== 1'bx ) && ( temp_prev[34] !== temp_expected_prev[34] )
		&& ((temp_expected_prev[34] !== last_temp_exp[34]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[34] = temp_expected_prev[34];
	end
	if (
		( temp_expected_prev[35] !== 1'bx ) && ( temp_prev[35] !== temp_expected_prev[35] )
		&& ((temp_expected_prev[35] !== last_temp_exp[35]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[35] = temp_expected_prev[35];
	end
	if (
		( temp_expected_prev[36] !== 1'bx ) && ( temp_prev[36] !== temp_expected_prev[36] )
		&& ((temp_expected_prev[36] !== last_temp_exp[36]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[36] = temp_expected_prev[36];
	end
	if (
		( temp_expected_prev[37] !== 1'bx ) && ( temp_prev[37] !== temp_expected_prev[37] )
		&& ((temp_expected_prev[37] !== last_temp_exp[37]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[37] = temp_expected_prev[37];
	end
	if (
		( temp_expected_prev[38] !== 1'bx ) && ( temp_prev[38] !== temp_expected_prev[38] )
		&& ((temp_expected_prev[38] !== last_temp_exp[38]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[38] = temp_expected_prev[38];
	end
	if (
		( temp_expected_prev[39] !== 1'bx ) && ( temp_prev[39] !== temp_expected_prev[39] )
		&& ((temp_expected_prev[39] !== last_temp_exp[39]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[39] = temp_expected_prev[39];
	end
	if (
		( temp_expected_prev[40] !== 1'bx ) && ( temp_prev[40] !== temp_expected_prev[40] )
		&& ((temp_expected_prev[40] !== last_temp_exp[40]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[40] = temp_expected_prev[40];
	end
	if (
		( temp_expected_prev[41] !== 1'bx ) && ( temp_prev[41] !== temp_expected_prev[41] )
		&& ((temp_expected_prev[41] !== last_temp_exp[41]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[41] = temp_expected_prev[41];
	end
	if (
		( temp_expected_prev[42] !== 1'bx ) && ( temp_prev[42] !== temp_expected_prev[42] )
		&& ((temp_expected_prev[42] !== last_temp_exp[42]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[42] = temp_expected_prev[42];
	end
	if (
		( temp_expected_prev[43] !== 1'bx ) && ( temp_prev[43] !== temp_expected_prev[43] )
		&& ((temp_expected_prev[43] !== last_temp_exp[43]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[43] = temp_expected_prev[43];
	end
	if (
		( temp_expected_prev[44] !== 1'bx ) && ( temp_prev[44] !== temp_expected_prev[44] )
		&& ((temp_expected_prev[44] !== last_temp_exp[44]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[44] = temp_expected_prev[44];
	end
	if (
		( temp_expected_prev[45] !== 1'bx ) && ( temp_prev[45] !== temp_expected_prev[45] )
		&& ((temp_expected_prev[45] !== last_temp_exp[45]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[45] = temp_expected_prev[45];
	end
	if (
		( temp_expected_prev[46] !== 1'bx ) && ( temp_prev[46] !== temp_expected_prev[46] )
		&& ((temp_expected_prev[46] !== last_temp_exp[46]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[46] = temp_expected_prev[46];
	end
	if (
		( temp_expected_prev[47] !== 1'bx ) && ( temp_prev[47] !== temp_expected_prev[47] )
		&& ((temp_expected_prev[47] !== last_temp_exp[47]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port temp[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", temp_expected_prev);
		$display ("     Real value = %b", temp_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_temp_exp[47] = temp_expected_prev[47];
	end
	if (
		( W_B_expected_prev !== 1'bx ) && ( W_B_prev !== W_B_expected_prev )
		&& ((W_B_expected_prev !== last_W_B_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_B_expected_prev);
		$display ("     Real value = %b", W_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_W_B_exp = W_B_expected_prev;
	end
	if (
		( zero_PC_expected_prev !== 1'bx ) && ( zero_PC_prev !== zero_PC_expected_prev )
		&& ((zero_PC_expected_prev !== last_zero_PC_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_PC_expected_prev);
		$display ("     Real value = %b", zero_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_zero_PC_exp = zero_PC_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module CU_Timer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cy;
reg start;
// wires                                               
wire BUS_MDR;
wire clk;
wire [3:0] cnt;
wire DST;
wire FI;
wire I_DBUS;
wire IBUS_IR;
wire IBUS_MAR;
wire IBUS_PC;
wire M_clk;
wire MAR_ABUS;
wire MAR_IBUS;
wire MDR_DBUS;
wire MDR_IBUS;
wire MRD;
wire MWR;
wire PC_IBUS;
wire PCplus1;
wire [7:0] T;
wire [47:0] temp;
wire W_B;
wire zero_PC;

wire sampler;                             

// assign statements (if any)                          
CU_Timer i1 (
// port map - connection between master ports and signals/registers   
	.BUS_MDR(BUS_MDR),
	.clk(clk),
	.cnt(cnt),
	.Cy(Cy),
	.DST(DST),
	.FI(FI),
	.I_DBUS(I_DBUS),
	.IBUS_IR(IBUS_IR),
	.IBUS_MAR(IBUS_MAR),
	.IBUS_PC(IBUS_PC),
	.M_clk(M_clk),
	.MAR_ABUS(MAR_ABUS),
	.MAR_IBUS(MAR_IBUS),
	.MDR_DBUS(MDR_DBUS),
	.MDR_IBUS(MDR_IBUS),
	.MRD(MRD),
	.MWR(MWR),
	.PC_IBUS(PC_IBUS),
	.PCplus1(PCplus1),
	.start(start),
	.T(T),
	.temp(temp),
	.W_B(W_B),
	.zero_PC(zero_PC)
);

// start
initial
begin
	start = 1'b0;
	start = #10000 1'b1;
	start = #10000 1'b0;
end 

// Cy
always
begin
	Cy = 1'b0;
	Cy = #25000 1'b1;
	#25000;
end 

CU_Timer_vlg_sample_tst tb_sample (
	.Cy(Cy),
	.start(start),
	.sampler_tx(sampler)
);

CU_Timer_vlg_check_tst tb_out(
	.BUS_MDR(BUS_MDR),
	.clk(clk),
	.cnt(cnt),
	.DST(DST),
	.FI(FI),
	.I_DBUS(I_DBUS),
	.IBUS_IR(IBUS_IR),
	.IBUS_MAR(IBUS_MAR),
	.IBUS_PC(IBUS_PC),
	.M_clk(M_clk),
	.MAR_ABUS(MAR_ABUS),
	.MAR_IBUS(MAR_IBUS),
	.MDR_DBUS(MDR_DBUS),
	.MDR_IBUS(MDR_IBUS),
	.MRD(MRD),
	.MWR(MWR),
	.PC_IBUS(PC_IBUS),
	.PCplus1(PCplus1),
	.T(T),
	.temp(temp),
	.W_B(W_B),
	.zero_PC(zero_PC),
	.sampler_rx(sampler)
);
endmodule

